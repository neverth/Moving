
type MaxHeap struct {
	data []int
	k    int
}

func (m *MaxHeap) GetElems() []int {
	return m.data
}

func (m *MaxHeap) Push(v int) {
	if len(m.data) < m.k {
		m.data = append(m.data, v)
		var t1, t2 int
		t2 = m.data[0]
		for i := 0; i < len(m.data)-1; i++ {
			t1 = t2
			t2 = m.data[i+1]
			m.data[i+1] = t1
		}
	} else {
		if m.k == 0 || v >= m.data[0] {
			return
		}
	}
	m.data[0] = v
	m.heapify(0)
}

func (m *MaxHeap) heapify(i int) {
	// 找到其左右节点
	left := (i+1)*2 - 1
	right := (i + 1) * 2
	// 找到其左右节点和根节点的最大值
	maxIndex := i
	if left < len(m.data) && m.data[left] > m.data[maxIndex] {
		maxIndex = left
	}

	if right < len(m.data) && m.data[right] > m.data[maxIndex] {
		maxIndex = right
	}

	// 左右节点没有最大的，直接返回
	if i == maxIndex {
		return
	}
	m.swap(i, maxIndex)
	// 重新调整其左右子树
	m.heapify(maxIndex)
}

func (m *MaxHeap) swap(i, j int) {
	t := m.data[i]
	m.data[i] = m.data[j]
	m.data[j] = t
}

func getLeastNumbers(arr []int, k int) []int {
	maxHeap := MaxHeap{
		data: make([]int, 0),
		k:    k,
	}
	for _, v := range arr {
		maxHeap.Push(v)
	}
	return maxHeap.GetElems()
}


//total_testcases:38
//total_correct:20
//input_formatted:[0,1,2,3,4,0,3,3,8,1,4,6,2,8,8,15,10,0,9,9,1,2,17,8,17,25,18,18,16,13,18,29,2,3,32,2,26,23,18,8,34,8,11,36,36,39,46,30,21,25,21,14,41,10,31,55,45,16,33,47,4,52,59,60,1,43,42,10,12,56,12,27,22,52,38,12,41,42,71,5,42,76,8,3,31,65,11,29,28,68,33,50,73,87,22,68,31,1,38,89]
60
//expected_output:[0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,5,6,8,8,8,8,8,8,8,9,9,10,10,10,11,11,12,12,12,13,14,15,16,16,17,17,18,18,18,18,21,21,22,22,23,25,25,26,27]
//code_output:[25,29,22,23,25,21,17,18,16,22,21,18,12,10,16,18,17,9,13,12,8,26,18,14,8,11,3,10,8,11,12,9,4,15,8,5,8,10,1,3,8,6,1,3,2,2,2,8,4,1,3,3,4,1,1,2,2,0,0,0]
